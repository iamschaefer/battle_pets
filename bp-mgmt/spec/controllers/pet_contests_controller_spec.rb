require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PetContestsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # PetContest. As you add validations to PetContest, be sure to
  # adjust the attributes here as well.
  before :each do
    @user = FactoryGirl.create(:user)
  end
  let(:valid_attributes) do
    challenger = FactoryGirl.create(:pet, user: @user, name: 'Fluffy')
    challenged = FactoryGirl.create(:pet, user: @user, name: 'Sprinkles')
    { challenger_id: challenger.id, challenged_id: challenged.id, contest_type: 'fight' }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PetContestsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all pet_contests as @pet_contests' do
      pet_contest = PetContest.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:pet_contests)).to eq([pet_contest])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested pet_contest as @pet_contest' do
      pet_contest = PetContest.create! valid_attributes
      get :show, params: { id: pet_contest.to_param }, session: valid_session
      expect(assigns(:pet_contest)).to eq(pet_contest)
    end
  end

  describe 'GET #new' do
    it 'assigns a new pet_contest as @pet_contest' do
      get :new, params: {}, session: valid_session
      expect(assigns(:pet_contest)).to be_a_new(PetContest)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested pet_contest as @pet_contest' do
      pet_contest = PetContest.create! valid_attributes
      get :edit, params: { id: pet_contest.to_param }, session: valid_session
      expect(assigns(:pet_contest)).to eq(pet_contest)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new PetContest' do
        expect do
          post :create, params: { pet_contest: valid_attributes }, session: valid_session
        end.to change(PetContest, :count).by(1)
      end
    end
  end
end
